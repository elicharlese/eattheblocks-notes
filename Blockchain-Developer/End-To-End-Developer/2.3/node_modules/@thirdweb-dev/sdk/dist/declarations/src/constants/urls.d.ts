import { SignerOrProvider } from "../core/types";
import { ethers } from "ethers";
/**
 * @internal
 */
export declare const DEFAULT_IPFS_GATEWAY = "https://gateway.ipfscdn.io/ipfs/";
/**
 * @internal
 */
export declare type ChainOrRpc = "mainnet" | "ethereum" | "goerli" | "polygon" | "matic" | "mumbai" | "fantom" | "fantom-testnet" | "avalanche" | "avalanche-testnet" | "avalanche-fuji" | "optimism" | "optimism-goerli" | "arbitrum" | "arbitrum-goerli" | "binance" | "binance-testnet" | (string & {});
export declare const DEFAULT_API_KEY = "f5db7c96b2131bfe3a36c6a3fcf9a3b8c88137112d94c9d5658b57db92aac1cf";
export declare function getRpcUrl(network: string): string;
/**
 * @internal
 * @param network - the chain name or rpc url
 * @returns the rpc url for that chain
 */
export declare function getProviderForNetwork(network: ChainOrRpc | SignerOrProvider): string | ethers.Signer | ethers.providers.Provider;
/**
 *
 * @param network - the chain name or rpc url
 * @param chainId - the optional chain id
 * @returns the provider
 */
export declare function getReadOnlyProvider(network: string, chainId?: number): ethers.providers.BaseProvider;
//# sourceMappingURL=urls.d.ts.map