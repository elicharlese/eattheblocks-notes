{
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "startTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxClaimableSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "supplyClaimed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "quantityLimitPerWallet",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "waitTimeInSecondsBetweenClaims",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "merkleRoot",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "pricePerToken",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            }
          ],
          "indexed": false,
          "internalType": "struct IDropClaimCondition.ClaimCondition[]",
          "name": "claimConditions",
          "type": "tuple[]"
        }
      ],
      "name": "ClaimConditionsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxTotalSupply",
          "type": "uint256"
        }
      ],
      "name": "MaxTotalSupplyUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "saleRecipient",
          "type": "address"
        }
      ],
      "name": "SaleRecipientForTokenUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "claimConditionIndex",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "claimer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quantityClaimed",
          "type": "uint256"
        }
      ],
      "name": "TokensClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "baseURI",
          "type": "string"
        }
      ],
      "name": "TokensLazyMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "currency",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "pricePerToken",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bytes32[]",
              "name": "proof",
              "type": "bytes32[]"
            },
            {
              "internalType": "uint256",
              "name": "maxQuantityInAllowlist",
              "type": "uint256"
            }
          ],
          "internalType": "struct IDropERC1155.AllowlistProof",
          "name": "allowlistProof",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "baseURIForTokens",
          "type": "string"
        }
      ],
      "name": "lazyMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "startTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxClaimableSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "supplyClaimed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "quantityLimitPerWallet",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "waitTimeInSecondsBetweenClaims",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "merkleRoot",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "pricePerToken",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            }
          ],
          "internalType": "struct IDropClaimCondition.ClaimCondition[]",
          "name": "phases",
          "type": "tuple[]"
        },
        {
          "internalType": "bool",
          "name": "resetClaimEligibility",
          "type": "bool"
        }
      ],
      "name": "setClaimConditions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "balanceOf(address,uint256)": "00fdd58e",
    "balanceOfBatch(address[],uint256[])": "4e1273f4",
    "claim(address,uint256,uint256,address,uint256,(bytes32[],uint256),bytes)": "27db5f08",
    "isApprovedForAll(address,address)": "e985e9c5",
    "lazyMint(uint256,string)": "47158264",
    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": "2eb2c2d6",
    "safeTransferFrom(address,address,uint256,uint256,bytes)": "f242432a",
    "setApprovalForAll(address,bool)": "a22cb465",
    "setClaimConditions(uint256,(uint256,uint256,uint256,uint256,uint256,bytes32,uint256,address)[],bool)": "ab073c22",
    "supportsInterface(bytes4)": "01ffc9a7"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxClaimableSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantityLimitPerWallet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"waitTimeInSecondsBetweenClaims\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"pricePerToken\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct IDropClaimCondition.ClaimCondition[]\",\"name\":\"claimConditions\",\"type\":\"tuple[]\"}],\"name\":\"ClaimConditionsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxTotalSupply\",\"type\":\"uint256\"}],\"name\":\"MaxTotalSupplyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"saleRecipient\",\"type\":\"address\"}],\"name\":\"SaleRecipientForTokenUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"claimConditionIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantityClaimed\",\"type\":\"uint256\"}],\"name\":\"TokensClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"TokensLazyMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pricePerToken\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"maxQuantityInAllowlist\",\"type\":\"uint256\"}],\"internalType\":\"struct IDropERC1155.AllowlistProof\",\"name\":\"allowlistProof\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"baseURIForTokens\",\"type\":\"string\"}],\"name\":\"lazyMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxClaimableSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantityLimitPerWallet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"waitTimeInSecondsBetweenClaims\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"pricePerToken\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"}],\"internalType\":\"struct IDropClaimCondition.ClaimCondition[]\",\"name\":\"phases\",\"type\":\"tuple[]\"},{\"internalType\":\"bool\",\"name\":\"resetClaimEligibility\",\"type\":\"bool\"}],\"name\":\"setClaimConditions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"ClaimConditionsUpdated(uint256,(uint256,uint256,uint256,uint256,uint256,bytes32,uint256,address)[])\":{\"details\":\"Emitted when new claim conditions are set for a token.\"},\"MaxTotalSupplyUpdated(uint256,uint256)\":{\"details\":\"Emitted when the global max supply of a token is updated.\"},\"SaleRecipientForTokenUpdated(uint256,address)\":{\"details\":\"Emitted when the sale recipient for a particular tokenId is updated.\"},\"TokensClaimed(uint256,uint256,address,address,uint256)\":{\"details\":\"Emitted when tokens are claimed.\"},\"TokensLazyMinted(uint256,uint256,string)\":{\"details\":\"Emitted when tokens are lazy minted.\"}},\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"Returns the amount of tokens of token type `id` owned by `account`. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}. Requirements: - `accounts` and `ids` must have the same length.\"},\"claim(address,uint256,uint256,address,uint256,(bytes32[],uint256),bytes)\":{\"params\":{\"allowlistProof\":\"The proof of the claimer's inclusion in the merkle root allowlist                                        of the claim conditions that apply.\",\"currency\":\"The currency in which to pay for the claim.\",\"data\":\"Arbitrary bytes data that can be leveraged in the implementation of this interface.\",\"pricePerToken\":\"The price per token to pay for the claim.\",\"quantity\":\"The quantity of the NFT to claim.\",\"receiver\":\"The receiver of the NFT to claim.\",\"tokenId\":\"The tokenId of the NFT to claim.\"}},\"isApprovedForAll(address,address)\":{\"details\":\"Returns true if `operator` is approved to transfer ``account``'s tokens. See {setApprovalForAll}.\"},\"lazyMint(uint256,string)\":{\"params\":{\"amount\":\"The amount of NFTs to lazy mint.\",\"baseURIForTokens\":\"The URI for the NFTs to lazy mint.\"}},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}. Emits a {TransferBatch} event. Requirements: - `ids` and `amounts` must have the same length. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the acceptance magic value.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"Transfers `amount` tokens of token type `id` from `from` to `to`. Emits a {TransferSingle} event. Requirements: - `to` cannot be the zero address. - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}. - `from` must have a balance of tokens of type `id` of at least `amount`. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the acceptance magic value.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`, Emits an {ApprovalForAll} event. Requirements: - `operator` cannot be the caller.\"},\"setClaimConditions(uint256,(uint256,uint256,uint256,uint256,uint256,bytes32,uint256,address)[],bool)\":{\"params\":{\"phases\":\"Claim conditions in ascending order by `startTimestamp`.\",\"resetClaimEligibility\":\"Whether to reset `limitLastClaimTimestamp` and                               `limitMerkleProofClaim` values when setting new                               claim conditions.\",\"tokenId\":\"The token ID for which to set mint conditions.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claim(address,uint256,uint256,address,uint256,(bytes32[],uint256),bytes)\":{\"notice\":\"Lets an account claim a given quantity of NFTs.\"},\"lazyMint(uint256,string)\":{\"notice\":\"Lets an account with `MINTER_ROLE` lazy mint 'n' NFTs.          The URIs for each token is the provided `_baseURIForTokens` + `{tokenId}`.\"},\"setClaimConditions(uint256,(uint256,uint256,uint256,uint256,uint256,bytes32,uint256,address)[],bool)\":{\"notice\":\"Lets a contract admin (account with `DEFAULT_ADMIN_ROLE`) set claim conditions.\"}},\"notice\":\"Thirdweb's 'Drop' contracts are distribution mechanisms for tokens. The  `DropERC721` contract is a distribution mechanism for ERC721 tokens.  A minter wallet (i.e. holder of `MINTER_ROLE`) can (lazy)mint 'n' tokens  at once by providing a single base URI for all tokens being lazy minted.  The URI for each of the 'n' tokens lazy minted is the provided base URI +  `{tokenId}` of the respective token. (e.g. \\\"ipsf://Qmece.../1\\\").  A minter can choose to lazy mint 'delayed-reveal' tokens. More on 'delayed-reveal'  tokens in [this article](https://blog.thirdweb.com/delayed-reveal-nfts).  A contract admin (i.e. holder of `DEFAULT_ADMIN_ROLE`) can create claim conditions  with non-overlapping time windows, and accounts can claim the tokens according to  restrictions defined in the claim condition that is active at the time of the transaction.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/prebuilts/interface/drop/IDropERC1155.sol\":\"IDropERC1155\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[\":@chainlink/=lib/chainlink/\",\":@ds-test/=lib/ds-test/src/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@std/=lib/forge-std/src/\",\":@thirdweb-dev/dynamic-contracts/=lib/dynamic-contracts/\",\":ERC721A-Upgradeable/=lib/ERC721A-Upgradeable/contracts/\",\":ERC721A/=lib/ERC721A/contracts/\",\":chainlink/=lib/chainlink/\",\":contracts/=contracts/\",\":ds-test/=lib/ds-test/src/\",\":dynamic-contracts/=lib/dynamic-contracts/src/\",\":erc4626-tests/=lib/chainlink/contracts/foundry-lib/openzeppelin-contracts/lib/erc4626-tests/\",\":erc721a-upgradeable/=lib/ERC721A-Upgradeable/\",\":erc721a/=lib/ERC721A/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\"]},\"sources\":{\"contracts/prebuilts/interface/drop/IDropClaimCondition.sol\":{\"keccak256\":\"0x29b0d88d88945055ea971029ef0ebbfd19b1188c3463eea09c6bc55798d81629\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://2874e855bd8260cb11a16e7fb4c69b1ba2ae3661494b065c795c0492a455510c\",\"dweb:/ipfs/QmYpChQsXWfyjYMotYpCPTkE2pwKcGsnrSksmtLaiA6w5j\"]},\"contracts/prebuilts/interface/drop/IDropERC1155.sol\":{\"keccak256\":\"0x629a2afb2516c4f839da61f7da51729c981d67d68d4efe1828fc0dd9e2ada943\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://c039fa23b39f6c909bfb2e20ed891e457a013e3d3c4632bb116d0f50bbd577f6\",\"dweb:/ipfs/QmSHq4ojAESa2nvzSZwzkXHDSuTNQGGyYUQ4xbzr4e3x9h\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC1155/IERC1155Upgradeable.sol\":{\"keccak256\":\"0x091a49ef99a2be002680781a10cc9dd74c0f348301ede5482c4ea625f79a8ffe\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e037192cadfd20ad0f1b0c54a0c770a1ba551e7d0fcb6d3708e5ba352f88ded2\",\"dweb:/ipfs/QmTXwY6odV1ToDZAYxbbLKThe9M5PUWTmWBjwT776hH4qm\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/IERC165Upgradeable.sol\":{\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://92ad7e572cf44e6b4b37631b44b62f9eb9fb1cf14d9ce51c1504d5dc7ccaf758\",\"dweb:/ipfs/QmcnbqX85tsWnUXPmtuPLE4SczME2sJaTfmqEFkuAJvWhy\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/structs/BitMapsUpgradeable.sol\":{\"keccak256\":\"0x266cee2afdf743513e8022da480684ed0c63147f469a766d499c7ae3c518e276\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://639f78e22e3da7b4eaa472a31b719cb10f182023d0b1469601e4e75f0bb99e95\",\"dweb:/ipfs/QmWKbk7nneevjSKSAcwCjaDQqwFH2uiZ5j7Nh2PxFPcGqt\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.12+commit.f00d7308"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "operator",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "bool",
              "name": "approved",
              "type": "bool",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "ApprovalForAll",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256",
              "indexed": true
            },
            {
              "internalType": "struct IDropClaimCondition.ClaimCondition[]",
              "name": "claimConditions",
              "type": "tuple[]",
              "components": [
                {
                  "internalType": "uint256",
                  "name": "startTimestamp",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "maxClaimableSupply",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "supplyClaimed",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "quantityLimitPerWallet",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "waitTimeInSecondsBetweenClaims",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32",
                  "name": "merkleRoot",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "pricePerToken",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "currency",
                  "type": "address"
                }
              ],
              "indexed": false
            }
          ],
          "type": "event",
          "name": "ClaimConditionsUpdated",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "maxTotalSupply",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "MaxTotalSupplyUpdated",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "saleRecipient",
              "type": "address",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "SaleRecipientForTokenUpdated",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "claimConditionIndex",
              "type": "uint256",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "claimer",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "quantityClaimed",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "TokensClaimed",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "startTokenId",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "endTokenId",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "string",
              "name": "baseURI",
              "type": "string",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "TokensLazyMinted",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "operator",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "from",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256[]",
              "name": "ids",
              "type": "uint256[]",
              "indexed": false
            },
            {
              "internalType": "uint256[]",
              "name": "values",
              "type": "uint256[]",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "TransferBatch",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "operator",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "from",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "TransferSingle",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "value",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "URI",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "balanceOf",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address[]",
              "name": "accounts",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "ids",
              "type": "uint256[]"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "balanceOfBatch",
          "outputs": [
            {
              "internalType": "uint256[]",
              "name": "",
              "type": "uint256[]"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "quantity",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "pricePerToken",
              "type": "uint256"
            },
            {
              "internalType": "struct IDropERC1155.AllowlistProof",
              "name": "allowlistProof",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32[]",
                  "name": "proof",
                  "type": "bytes32[]"
                },
                {
                  "internalType": "uint256",
                  "name": "maxQuantityInAllowlist",
                  "type": "uint256"
                }
              ]
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "claim"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "isApprovedForAll",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "baseURIForTokens",
              "type": "string"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "lazyMint"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "ids",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "amounts",
              "type": "uint256[]"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "safeBatchTransferFrom"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "safeTransferFrom"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "approved",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setApprovalForAll"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "struct IDropClaimCondition.ClaimCondition[]",
              "name": "phases",
              "type": "tuple[]",
              "components": [
                {
                  "internalType": "uint256",
                  "name": "startTimestamp",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "maxClaimableSupply",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "supplyClaimed",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "quantityLimitPerWallet",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "waitTimeInSecondsBetweenClaims",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32",
                  "name": "merkleRoot",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "pricePerToken",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "currency",
                  "type": "address"
                }
              ]
            },
            {
              "internalType": "bool",
              "name": "resetClaimEligibility",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setClaimConditions"
        },
        {
          "inputs": [
            {
              "internalType": "bytes4",
              "name": "interfaceId",
              "type": "bytes4"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "supportsInterface",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "balanceOf(address,uint256)": {
            "details": "Returns the amount of tokens of token type `id` owned by `account`. Requirements: - `account` cannot be the zero address."
          },
          "balanceOfBatch(address[],uint256[])": {
            "details": "xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}. Requirements: - `accounts` and `ids` must have the same length."
          },
          "claim(address,uint256,uint256,address,uint256,(bytes32[],uint256),bytes)": {
            "params": {
              "allowlistProof": "The proof of the claimer's inclusion in the merkle root allowlist                                        of the claim conditions that apply.",
              "currency": "The currency in which to pay for the claim.",
              "data": "Arbitrary bytes data that can be leveraged in the implementation of this interface.",
              "pricePerToken": "The price per token to pay for the claim.",
              "quantity": "The quantity of the NFT to claim.",
              "receiver": "The receiver of the NFT to claim.",
              "tokenId": "The tokenId of the NFT to claim."
            }
          },
          "isApprovedForAll(address,address)": {
            "details": "Returns true if `operator` is approved to transfer ``account``'s tokens. See {setApprovalForAll}."
          },
          "lazyMint(uint256,string)": {
            "params": {
              "amount": "The amount of NFTs to lazy mint.",
              "baseURIForTokens": "The URI for the NFTs to lazy mint."
            }
          },
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
            "details": "xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}. Emits a {TransferBatch} event. Requirements: - `ids` and `amounts` must have the same length. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the acceptance magic value."
          },
          "safeTransferFrom(address,address,uint256,uint256,bytes)": {
            "details": "Transfers `amount` tokens of token type `id` from `from` to `to`. Emits a {TransferSingle} event. Requirements: - `to` cannot be the zero address. - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}. - `from` must have a balance of tokens of type `id` of at least `amount`. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the acceptance magic value."
          },
          "setApprovalForAll(address,bool)": {
            "details": "Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`, Emits an {ApprovalForAll} event. Requirements: - `operator` cannot be the caller."
          },
          "setClaimConditions(uint256,(uint256,uint256,uint256,uint256,uint256,bytes32,uint256,address)[],bool)": {
            "params": {
              "phases": "Claim conditions in ascending order by `startTimestamp`.",
              "resetClaimEligibility": "Whether to reset `limitLastClaimTimestamp` and                               `limitMerkleProofClaim` values when setting new                               claim conditions.",
              "tokenId": "The token ID for which to set mint conditions."
            }
          },
          "supportsInterface(bytes4)": {
            "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "claim(address,uint256,uint256,address,uint256,(bytes32[],uint256),bytes)": {
            "notice": "Lets an account claim a given quantity of NFTs."
          },
          "lazyMint(uint256,string)": {
            "notice": "Lets an account with `MINTER_ROLE` lazy mint 'n' NFTs.          The URIs for each token is the provided `_baseURIForTokens` + `{tokenId}`."
          },
          "setClaimConditions(uint256,(uint256,uint256,uint256,uint256,uint256,bytes32,uint256,address)[],bool)": {
            "notice": "Lets a contract admin (account with `DEFAULT_ADMIN_ROLE`) set claim conditions."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@chainlink/=lib/chainlink/",
        "@ds-test/=lib/ds-test/src/",
        "@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/",
        "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
        "@std/=lib/forge-std/src/",
        "@thirdweb-dev/dynamic-contracts/=lib/dynamic-contracts/",
        "ERC721A-Upgradeable/=lib/ERC721A-Upgradeable/contracts/",
        "ERC721A/=lib/ERC721A/contracts/",
        "chainlink/=lib/chainlink/",
        "contracts/=contracts/",
        "ds-test/=lib/ds-test/src/",
        "dynamic-contracts/=lib/dynamic-contracts/src/",
        "erc4626-tests/=lib/chainlink/contracts/foundry-lib/openzeppelin-contracts/lib/erc4626-tests/",
        "erc721a-upgradeable/=lib/ERC721A-Upgradeable/",
        "erc721a/=lib/ERC721A/",
        "forge-std/=lib/forge-std/src/",
        "openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 20
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "contracts/prebuilts/interface/drop/IDropERC1155.sol": "IDropERC1155"
      },
      "libraries": {}
    },
    "sources": {
      "contracts/prebuilts/interface/drop/IDropClaimCondition.sol": {
        "keccak256": "0x29b0d88d88945055ea971029ef0ebbfd19b1188c3463eea09c6bc55798d81629",
        "urls": [
          "bzz-raw://2874e855bd8260cb11a16e7fb4c69b1ba2ae3661494b065c795c0492a455510c",
          "dweb:/ipfs/QmYpChQsXWfyjYMotYpCPTkE2pwKcGsnrSksmtLaiA6w5j"
        ],
        "license": "Apache-2.0"
      },
      "contracts/prebuilts/interface/drop/IDropERC1155.sol": {
        "keccak256": "0x629a2afb2516c4f839da61f7da51729c981d67d68d4efe1828fc0dd9e2ada943",
        "urls": [
          "bzz-raw://c039fa23b39f6c909bfb2e20ed891e457a013e3d3c4632bb116d0f50bbd577f6",
          "dweb:/ipfs/QmSHq4ojAESa2nvzSZwzkXHDSuTNQGGyYUQ4xbzr4e3x9h"
        ],
        "license": "Apache-2.0"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC1155/IERC1155Upgradeable.sol": {
        "keccak256": "0x091a49ef99a2be002680781a10cc9dd74c0f348301ede5482c4ea625f79a8ffe",
        "urls": [
          "bzz-raw://e037192cadfd20ad0f1b0c54a0c770a1ba551e7d0fcb6d3708e5ba352f88ded2",
          "dweb:/ipfs/QmTXwY6odV1ToDZAYxbbLKThe9M5PUWTmWBjwT776hH4qm"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/IERC165Upgradeable.sol": {
        "keccak256": "0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09",
        "urls": [
          "bzz-raw://92ad7e572cf44e6b4b37631b44b62f9eb9fb1cf14d9ce51c1504d5dc7ccaf758",
          "dweb:/ipfs/QmcnbqX85tsWnUXPmtuPLE4SczME2sJaTfmqEFkuAJvWhy"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/structs/BitMapsUpgradeable.sol": {
        "keccak256": "0x266cee2afdf743513e8022da480684ed0c63147f469a766d499c7ae3c518e276",
        "urls": [
          "bzz-raw://639f78e22e3da7b4eaa472a31b719cb10f182023d0b1469601e4e75f0bb99e95",
          "dweb:/ipfs/QmWKbk7nneevjSKSAcwCjaDQqwFH2uiZ5j7Nh2PxFPcGqt"
        ],
        "license": "MIT"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "contracts/prebuilts/interface/drop/IDropERC1155.sol",
    "id": 75938,
    "exportedSymbols": {
      "BitMapsUpgradeable": [
        160994
      ],
      "IDropClaimCondition": [
        75837
      ],
      "IDropERC1155": [
        75937
      ],
      "IERC1155Upgradeable": [
        153033
      ],
      "IERC165Upgradeable": [
        158501
      ]
    },
    "nodeType": "SourceUnit",
    "src": "39:4235:340",
    "nodes": [
      {
        "id": 75839,
        "nodeType": "PragmaDirective",
        "src": "39:24:340",
        "nodes": [],
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".11"
        ]
      },
      {
        "id": 75840,
        "nodeType": "ImportDirective",
        "src": "65:83:340",
        "nodes": [],
        "absolutePath": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC1155/IERC1155Upgradeable.sol",
        "file": "@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 75938,
        "sourceUnit": 153034,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 75841,
        "nodeType": "ImportDirective",
        "src": "149:35:340",
        "nodes": [],
        "absolutePath": "contracts/prebuilts/interface/drop/IDropClaimCondition.sol",
        "file": "./IDropClaimCondition.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 75938,
        "sourceUnit": 75838,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 75937,
        "nodeType": "ContractDefinition",
        "src": "1086:3187:340",
        "nodes": [
          {
            "id": 75852,
            "nodeType": "StructDefinition",
            "src": "1159:94:340",
            "nodes": [],
            "canonicalName": "IDropERC1155.AllowlistProof",
            "members": [
              {
                "constant": false,
                "id": 75849,
                "mutability": "mutable",
                "name": "proof",
                "nameLocation": "1201:5:340",
                "nodeType": "VariableDeclaration",
                "scope": 75852,
                "src": "1191:15:340",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
                  "typeString": "bytes32[]"
                },
                "typeName": {
                  "baseType": {
                    "id": 75847,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "1191:7:340",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "id": 75848,
                  "nodeType": "ArrayTypeName",
                  "src": "1191:9:340",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
                    "typeString": "bytes32[]"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 75851,
                "mutability": "mutable",
                "name": "maxQuantityInAllowlist",
                "nameLocation": "1224:22:340",
                "nodeType": "VariableDeclaration",
                "scope": 75852,
                "src": "1216:30:340",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 75850,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "1216:7:340",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              }
            ],
            "name": "AllowlistProof",
            "nameLocation": "1166:14:340",
            "scope": 75937,
            "visibility": "public"
          },
          {
            "id": 75865,
            "nodeType": "EventDefinition",
            "src": "1305:196:340",
            "nodes": [],
            "anonymous": false,
            "documentation": {
              "id": 75853,
              "nodeType": "StructuredDocumentation",
              "src": "1259:41:340",
              "text": "@dev Emitted when tokens are claimed."
            },
            "name": "TokensClaimed",
            "nameLocation": "1311:13:340",
            "parameters": {
              "id": 75864,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 75855,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "claimConditionIndex",
                  "nameLocation": "1350:19:340",
                  "nodeType": "VariableDeclaration",
                  "scope": 75865,
                  "src": "1334:35:340",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 75854,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1334:7:340",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 75857,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "tokenId",
                  "nameLocation": "1395:7:340",
                  "nodeType": "VariableDeclaration",
                  "scope": 75865,
                  "src": "1379:23:340",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 75856,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1379:7:340",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 75859,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "claimer",
                  "nameLocation": "1428:7:340",
                  "nodeType": "VariableDeclaration",
                  "scope": 75865,
                  "src": "1412:23:340",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 75858,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1412:7:340",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 75861,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "receiver",
                  "nameLocation": "1453:8:340",
                  "nodeType": "VariableDeclaration",
                  "scope": 75865,
                  "src": "1445:16:340",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 75860,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1445:7:340",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 75863,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "quantityClaimed",
                  "nameLocation": "1479:15:340",
                  "nodeType": "VariableDeclaration",
                  "scope": 75865,
                  "src": "1471:23:340",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 75862,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1471:7:340",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1324:176:340"
            }
          },
          {
            "id": 75874,
            "nodeType": "EventDefinition",
            "src": "1557:81:340",
            "nodes": [],
            "anonymous": false,
            "documentation": {
              "id": 75866,
              "nodeType": "StructuredDocumentation",
              "src": "1507:45:340",
              "text": "@dev Emitted when tokens are lazy minted."
            },
            "name": "TokensLazyMinted",
            "nameLocation": "1563:16:340",
            "parameters": {
              "id": 75873,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 75868,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "startTokenId",
                  "nameLocation": "1588:12:340",
                  "nodeType": "VariableDeclaration",
                  "scope": 75874,
                  "src": "1580:20:340",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 75867,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1580:7:340",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 75870,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "endTokenId",
                  "nameLocation": "1610:10:340",
                  "nodeType": "VariableDeclaration",
                  "scope": 75874,
                  "src": "1602:18:340",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 75869,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1602:7:340",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 75872,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "baseURI",
                  "nameLocation": "1629:7:340",
                  "nodeType": "VariableDeclaration",
                  "scope": 75874,
                  "src": "1622:14:340",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 75871,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1622:6:340",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1579:58:340"
            }
          },
          {
            "id": 75883,
            "nodeType": "EventDefinition",
            "src": "1712:88:340",
            "nodes": [],
            "anonymous": false,
            "documentation": {
              "id": 75875,
              "nodeType": "StructuredDocumentation",
              "src": "1644:63:340",
              "text": "@dev Emitted when new claim conditions are set for a token."
            },
            "name": "ClaimConditionsUpdated",
            "nameLocation": "1718:22:340",
            "parameters": {
              "id": 75882,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 75877,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "tokenId",
                  "nameLocation": "1757:7:340",
                  "nodeType": "VariableDeclaration",
                  "scope": 75883,
                  "src": "1741:23:340",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 75876,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1741:7:340",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 75881,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "claimConditions",
                  "nameLocation": "1783:15:340",
                  "nodeType": "VariableDeclaration",
                  "scope": 75883,
                  "src": "1766:32:340",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_struct$_ClaimCondition_$75809_memory_ptr_$dyn_memory_ptr",
                    "typeString": "struct IDropClaimCondition.ClaimCondition[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 75879,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 75878,
                        "name": "ClaimCondition",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 75809,
                        "src": "1766:14:340"
                      },
                      "referencedDeclaration": 75809,
                      "src": "1766:14:340",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_ClaimCondition_$75809_storage_ptr",
                        "typeString": "struct IDropClaimCondition.ClaimCondition"
                      }
                    },
                    "id": 75880,
                    "nodeType": "ArrayTypeName",
                    "src": "1766:16:340",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_ClaimCondition_$75809_storage_$dyn_storage_ptr",
                      "typeString": "struct IDropClaimCondition.ClaimCondition[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1740:59:340"
            }
          },
          {
            "id": 75890,
            "nodeType": "EventDefinition",
            "src": "1877:69:340",
            "nodes": [],
            "anonymous": false,
            "documentation": {
              "id": 75884,
              "nodeType": "StructuredDocumentation",
              "src": "1806:66:340",
              "text": "@dev Emitted when the global max supply of a token is updated."
            },
            "name": "MaxTotalSupplyUpdated",
            "nameLocation": "1883:21:340",
            "parameters": {
              "id": 75889,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 75886,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "tokenId",
                  "nameLocation": "1913:7:340",
                  "nodeType": "VariableDeclaration",
                  "scope": 75890,
                  "src": "1905:15:340",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 75885,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1905:7:340",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 75888,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "maxTotalSupply",
                  "nameLocation": "1930:14:340",
                  "nodeType": "VariableDeclaration",
                  "scope": 75890,
                  "src": "1922:22:340",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 75887,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1922:7:340",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1904:41:340"
            }
          },
          {
            "id": 75897,
            "nodeType": "EventDefinition",
            "src": "2034:83:340",
            "nodes": [],
            "anonymous": false,
            "documentation": {
              "id": 75891,
              "nodeType": "StructuredDocumentation",
              "src": "1952:77:340",
              "text": "@dev Emitted when the sale recipient for a particular tokenId is updated."
            },
            "name": "SaleRecipientForTokenUpdated",
            "nameLocation": "2040:28:340",
            "parameters": {
              "id": 75896,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 75893,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "tokenId",
                  "nameLocation": "2085:7:340",
                  "nodeType": "VariableDeclaration",
                  "scope": 75897,
                  "src": "2069:23:340",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 75892,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2069:7:340",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 75895,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "saleRecipient",
                  "nameLocation": "2102:13:340",
                  "nodeType": "VariableDeclaration",
                  "scope": 75897,
                  "src": "2094:21:340",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 75894,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2094:7:340",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2068:48:340"
            }
          },
          {
            "id": 75905,
            "nodeType": "FunctionDefinition",
            "src": "2440:77:340",
            "nodes": [],
            "documentation": {
              "id": 75898,
              "nodeType": "StructuredDocumentation",
              "src": "2123:312:340",
              "text": "  @notice Lets an account with `MINTER_ROLE` lazy mint 'n' NFTs.\n          The URIs for each token is the provided `_baseURIForTokens` + `{tokenId}`.\n  @param amount           The amount of NFTs to lazy mint.\n  @param baseURIForTokens The URI for the NFTs to lazy mint."
            },
            "functionSelector": "47158264",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "lazyMint",
            "nameLocation": "2449:8:340",
            "parameters": {
              "id": 75903,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 75900,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "2466:6:340",
                  "nodeType": "VariableDeclaration",
                  "scope": 75905,
                  "src": "2458:14:340",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 75899,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2458:7:340",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 75902,
                  "mutability": "mutable",
                  "name": "baseURIForTokens",
                  "nameLocation": "2490:16:340",
                  "nodeType": "VariableDeclaration",
                  "scope": 75905,
                  "src": "2474:32:340",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_calldata_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 75901,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "2474:6:340",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2457:50:340"
            },
            "returnParameters": {
              "id": 75904,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2516:0:340"
            },
            "scope": 75937,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 75924,
            "nodeType": "FunctionDefinition",
            "src": "3351:247:340",
            "nodes": [],
            "documentation": {
              "id": 75906,
              "nodeType": "StructuredDocumentation",
              "src": "2523:823:340",
              "text": "  @notice Lets an account claim a given quantity of NFTs.\n  @param receiver                       The receiver of the NFT to claim.\n  @param tokenId                        The tokenId of the NFT to claim.\n  @param quantity                       The quantity of the NFT to claim.\n  @param currency                       The currency in which to pay for the claim.\n  @param pricePerToken                  The price per token to pay for the claim.\n  @param allowlistProof                 The proof of the claimer's inclusion in the merkle root allowlist\n                                        of the claim conditions that apply.\n  @param data                           Arbitrary bytes data that can be leveraged in the implementation of this interface."
            },
            "functionSelector": "27db5f08",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "claim",
            "nameLocation": "3360:5:340",
            "parameters": {
              "id": 75922,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 75908,
                  "mutability": "mutable",
                  "name": "receiver",
                  "nameLocation": "3383:8:340",
                  "nodeType": "VariableDeclaration",
                  "scope": 75924,
                  "src": "3375:16:340",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 75907,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3375:7:340",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 75910,
                  "mutability": "mutable",
                  "name": "tokenId",
                  "nameLocation": "3409:7:340",
                  "nodeType": "VariableDeclaration",
                  "scope": 75924,
                  "src": "3401:15:340",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 75909,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3401:7:340",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 75912,
                  "mutability": "mutable",
                  "name": "quantity",
                  "nameLocation": "3434:8:340",
                  "nodeType": "VariableDeclaration",
                  "scope": 75924,
                  "src": "3426:16:340",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 75911,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3426:7:340",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 75914,
                  "mutability": "mutable",
                  "name": "currency",
                  "nameLocation": "3460:8:340",
                  "nodeType": "VariableDeclaration",
                  "scope": 75924,
                  "src": "3452:16:340",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 75913,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3452:7:340",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 75916,
                  "mutability": "mutable",
                  "name": "pricePerToken",
                  "nameLocation": "3486:13:340",
                  "nodeType": "VariableDeclaration",
                  "scope": 75924,
                  "src": "3478:21:340",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 75915,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3478:7:340",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 75919,
                  "mutability": "mutable",
                  "name": "allowlistProof",
                  "nameLocation": "3533:14:340",
                  "nodeType": "VariableDeclaration",
                  "scope": 75924,
                  "src": "3509:38:340",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_AllowlistProof_$75852_calldata_ptr",
                    "typeString": "struct IDropERC1155.AllowlistProof"
                  },
                  "typeName": {
                    "id": 75918,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 75917,
                      "name": "AllowlistProof",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 75852,
                      "src": "3509:14:340"
                    },
                    "referencedDeclaration": 75852,
                    "src": "3509:14:340",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_AllowlistProof_$75852_storage_ptr",
                      "typeString": "struct IDropERC1155.AllowlistProof"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 75921,
                  "mutability": "mutable",
                  "name": "data",
                  "nameLocation": "3570:4:340",
                  "nodeType": "VariableDeclaration",
                  "scope": 75924,
                  "src": "3557:17:340",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 75920,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "3557:5:340",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3365:215:340"
            },
            "returnParameters": {
              "id": 75923,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3597:0:340"
            },
            "scope": 75937,
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 75936,
            "nodeType": "FunctionDefinition",
            "src": "4125:146:340",
            "nodes": [],
            "documentation": {
              "id": 75925,
              "nodeType": "StructuredDocumentation",
              "src": "3604:516:340",
              "text": "  @notice Lets a contract admin (account with `DEFAULT_ADMIN_ROLE`) set claim conditions.\n  @param tokenId               The token ID for which to set mint conditions.\n  @param phases                Claim conditions in ascending order by `startTimestamp`.\n  @param resetClaimEligibility Whether to reset `limitLastClaimTimestamp` and\n                               `limitMerkleProofClaim` values when setting new\n                               claim conditions."
            },
            "functionSelector": "ab073c22",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setClaimConditions",
            "nameLocation": "4134:18:340",
            "parameters": {
              "id": 75934,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 75927,
                  "mutability": "mutable",
                  "name": "tokenId",
                  "nameLocation": "4170:7:340",
                  "nodeType": "VariableDeclaration",
                  "scope": 75936,
                  "src": "4162:15:340",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 75926,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4162:7:340",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 75931,
                  "mutability": "mutable",
                  "name": "phases",
                  "nameLocation": "4213:6:340",
                  "nodeType": "VariableDeclaration",
                  "scope": 75936,
                  "src": "4187:32:340",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_struct$_ClaimCondition_$75809_calldata_ptr_$dyn_calldata_ptr",
                    "typeString": "struct IDropClaimCondition.ClaimCondition[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 75929,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 75928,
                        "name": "ClaimCondition",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 75809,
                        "src": "4187:14:340"
                      },
                      "referencedDeclaration": 75809,
                      "src": "4187:14:340",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_ClaimCondition_$75809_storage_ptr",
                        "typeString": "struct IDropClaimCondition.ClaimCondition"
                      }
                    },
                    "id": 75930,
                    "nodeType": "ArrayTypeName",
                    "src": "4187:16:340",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_ClaimCondition_$75809_storage_$dyn_storage_ptr",
                      "typeString": "struct IDropClaimCondition.ClaimCondition[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 75933,
                  "mutability": "mutable",
                  "name": "resetClaimEligibility",
                  "nameLocation": "4234:21:340",
                  "nodeType": "VariableDeclaration",
                  "scope": 75936,
                  "src": "4229:26:340",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 75932,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "4229:4:340",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4152:109:340"
            },
            "returnParameters": {
              "id": 75935,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4270:0:340"
            },
            "scope": 75937,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 75843,
              "name": "IERC1155Upgradeable",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 153033,
              "src": "1112:19:340"
            },
            "id": 75844,
            "nodeType": "InheritanceSpecifier",
            "src": "1112:19:340"
          },
          {
            "baseName": {
              "id": 75845,
              "name": "IDropClaimCondition",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 75837,
              "src": "1133:19:340"
            },
            "id": 75846,
            "nodeType": "InheritanceSpecifier",
            "src": "1133:19:340"
          }
        ],
        "canonicalName": "IDropERC1155",
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": {
          "id": 75842,
          "nodeType": "StructuredDocumentation",
          "src": "186:898:340",
          "text": "  Thirdweb's 'Drop' contracts are distribution mechanisms for tokens. The\n  `DropERC721` contract is a distribution mechanism for ERC721 tokens.\n  A minter wallet (i.e. holder of `MINTER_ROLE`) can (lazy)mint 'n' tokens\n  at once by providing a single base URI for all tokens being lazy minted.\n  The URI for each of the 'n' tokens lazy minted is the provided base URI +\n  `{tokenId}` of the respective token. (e.g. \"ipsf://Qmece.../1\").\n  A minter can choose to lazy mint 'delayed-reveal' tokens. More on 'delayed-reveal'\n  tokens in [this article](https://blog.thirdweb.com/delayed-reveal-nfts).\n  A contract admin (i.e. holder of `DEFAULT_ADMIN_ROLE`) can create claim conditions\n  with non-overlapping time windows, and accounts can claim the tokens according to\n  restrictions defined in the claim condition that is active at the time of the transaction."
        },
        "fullyImplemented": false,
        "linearizedBaseContracts": [
          75937,
          75837,
          153033,
          158501
        ],
        "name": "IDropERC1155",
        "nameLocation": "1096:12:340",
        "scope": 75938,
        "usedErrors": []
      }
    ],
    "license": "Apache-2.0"
  },
  "id": 340
}