{
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "unwrapper",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipientOfWrappedContents",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenIdOfWrappedToken",
          "type": "uint256"
        }
      ],
      "name": "TokensUnwrapped",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "wrapper",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipientOfWrappedToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenIdOfWrappedToken",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "assetContract",
              "type": "address"
            },
            {
              "internalType": "enum ITokenBundle.TokenType",
              "name": "tokenType",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalAmount",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct ITokenBundle.Token[]",
          "name": "wrappedContents",
          "type": "tuple[]"
        }
      ],
      "name": "TokensWrapped",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "unwrap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "assetContract",
              "type": "address"
            },
            {
              "internalType": "enum ITokenBundle.TokenType",
              "name": "tokenType",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct ITokenBundle.Token[]",
          "name": "wrappedContents",
          "type": "tuple[]"
        },
        {
          "internalType": "string",
          "name": "uriForWrappedToken",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "wrap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "unwrap(uint256,address)": "7647691d",
    "wrap((address,uint8,uint256,uint256)[],string,address)": "29e471dd"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"unwrapper\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipientOfWrappedContents\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenIdOfWrappedToken\",\"type\":\"uint256\"}],\"name\":\"TokensUnwrapped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wrapper\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipientOfWrappedToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenIdOfWrappedToken\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"assetContract\",\"type\":\"address\"},{\"internalType\":\"enum ITokenBundle.TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct ITokenBundle.Token[]\",\"name\":\"wrappedContents\",\"type\":\"tuple[]\"}],\"name\":\"TokensWrapped\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"unwrap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"assetContract\",\"type\":\"address\"},{\"internalType\":\"enum ITokenBundle.TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct ITokenBundle.Token[]\",\"name\":\"wrappedContents\",\"type\":\"tuple[]\"},{\"internalType\":\"string\",\"name\":\"uriForWrappedToken\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"wrap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"TokensUnwrapped(address,address,uint256)\":{\"details\":\"Emitted when tokens are unwrapped.\"},\"TokensWrapped(address,address,uint256,(address,uint8,uint256,uint256)[])\":{\"details\":\"Emitted when tokens are wrapped.\"}},\"kind\":\"dev\",\"methods\":{\"unwrap(uint256,address)\":{\"params\":{\"recipient\":\"The recipient of the underlying ERC1155, ERC721, ERC20 tokens of the wrapped NFT.\",\"tokenId\":\"The token Id of the wrapped NFT to unwrap.\"}},\"wrap((address,uint8,uint256,uint256)[],string,address)\":{\"params\":{\"recipient\":\"The recipient of the wrapped NFT.\",\"uriForWrappedToken\":\"The metadata URI for the wrapped NFT.\",\"wrappedContents\":\"The tokens to wrap.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"unwrap(uint256,address)\":{\"notice\":\"Unwrap a wrapped NFT to retrieve underlying ERC1155, ERC721, ERC20 tokens.\"},\"wrap((address,uint8,uint256,uint256)[],string,address)\":{\"notice\":\"Wrap multiple ERC1155, ERC721, ERC20 tokens into a single wrapped NFT.\"}},\"notice\":\"Thirdweb's Multiwrap contract lets you wrap arbitrary ERC20, ERC721 and ERC1155  tokens you own into a single wrapped token / NFT.  A wrapped NFT can be unwrapped i.e. burned in exchange for its underlying contents.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/prebuilts/interface/IMultiwrap.sol\":\"IMultiwrap\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[\":@chainlink/=lib/chainlink/\",\":@ds-test/=lib/ds-test/src/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@std/=lib/forge-std/src/\",\":@thirdweb-dev/dynamic-contracts/=lib/dynamic-contracts/\",\":ERC721A-Upgradeable/=lib/ERC721A-Upgradeable/contracts/\",\":ERC721A/=lib/ERC721A/contracts/\",\":chainlink/=lib/chainlink/\",\":contracts/=contracts/\",\":ds-test/=lib/ds-test/src/\",\":dynamic-contracts/=lib/dynamic-contracts/src/\",\":erc4626-tests/=lib/chainlink/contracts/foundry-lib/openzeppelin-contracts/lib/erc4626-tests/\",\":erc721a-upgradeable/=lib/ERC721A-Upgradeable/\",\":erc721a/=lib/ERC721A/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\"]},\"sources\":{\"contracts/extension/interface/ITokenBundle.sol\":{\"keccak256\":\"0x4b575f4d82b4cb77b48262e2bffcc15497e52d21c38ba5614668a9cd29540949\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://496f280ff443f0466263cf06351b18a1796bfc5fe5948a7ae60316435ef564a0\",\"dweb:/ipfs/QmbAvbEe7X1oNbBDSFqPDWKmSkZC7dv4kN3aHJde2b4dV3\"]},\"contracts/prebuilts/interface/IMultiwrap.sol\":{\"keccak256\":\"0x38ec704445e9d6a7ea5f8e2b249dce160b6892975480f365a18b2ed6419a18fe\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://b29ee2c7290696e04fa06d84e3a1093d92704ebd310bfb5e99f45191b98ee4df\",\"dweb:/ipfs/Qmea1Dh3i3EJM68qqTUJv8f1mZwq1yMEXKNxLanjR3WZen\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.12+commit.f00d7308"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "unwrapper",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "recipientOfWrappedContents",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "tokenIdOfWrappedToken",
              "type": "uint256",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "TokensUnwrapped",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "wrapper",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "recipientOfWrappedToken",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "tokenIdOfWrappedToken",
              "type": "uint256",
              "indexed": true
            },
            {
              "internalType": "struct ITokenBundle.Token[]",
              "name": "wrappedContents",
              "type": "tuple[]",
              "components": [
                {
                  "internalType": "address",
                  "name": "assetContract",
                  "type": "address"
                },
                {
                  "internalType": "enum ITokenBundle.TokenType",
                  "name": "tokenType",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "totalAmount",
                  "type": "uint256"
                }
              ],
              "indexed": false
            }
          ],
          "type": "event",
          "name": "TokensWrapped",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "unwrap"
        },
        {
          "inputs": [
            {
              "internalType": "struct ITokenBundle.Token[]",
              "name": "wrappedContents",
              "type": "tuple[]",
              "components": [
                {
                  "internalType": "address",
                  "name": "assetContract",
                  "type": "address"
                },
                {
                  "internalType": "enum ITokenBundle.TokenType",
                  "name": "tokenType",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "totalAmount",
                  "type": "uint256"
                }
              ]
            },
            {
              "internalType": "string",
              "name": "uriForWrappedToken",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "wrap",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "unwrap(uint256,address)": {
            "params": {
              "recipient": "The recipient of the underlying ERC1155, ERC721, ERC20 tokens of the wrapped NFT.",
              "tokenId": "The token Id of the wrapped NFT to unwrap."
            }
          },
          "wrap((address,uint8,uint256,uint256)[],string,address)": {
            "params": {
              "recipient": "The recipient of the wrapped NFT.",
              "uriForWrappedToken": "The metadata URI for the wrapped NFT.",
              "wrappedContents": "The tokens to wrap."
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "unwrap(uint256,address)": {
            "notice": "Unwrap a wrapped NFT to retrieve underlying ERC1155, ERC721, ERC20 tokens."
          },
          "wrap((address,uint8,uint256,uint256)[],string,address)": {
            "notice": "Wrap multiple ERC1155, ERC721, ERC20 tokens into a single wrapped NFT."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@chainlink/=lib/chainlink/",
        "@ds-test/=lib/ds-test/src/",
        "@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/",
        "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
        "@std/=lib/forge-std/src/",
        "@thirdweb-dev/dynamic-contracts/=lib/dynamic-contracts/",
        "ERC721A-Upgradeable/=lib/ERC721A-Upgradeable/contracts/",
        "ERC721A/=lib/ERC721A/contracts/",
        "chainlink/=lib/chainlink/",
        "contracts/=contracts/",
        "ds-test/=lib/ds-test/src/",
        "dynamic-contracts/=lib/dynamic-contracts/src/",
        "erc4626-tests/=lib/chainlink/contracts/foundry-lib/openzeppelin-contracts/lib/erc4626-tests/",
        "erc721a-upgradeable/=lib/ERC721A-Upgradeable/",
        "erc721a/=lib/ERC721A/",
        "forge-std/=lib/forge-std/src/",
        "openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 20
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "contracts/prebuilts/interface/IMultiwrap.sol": "IMultiwrap"
      },
      "libraries": {}
    },
    "sources": {
      "contracts/extension/interface/ITokenBundle.sol": {
        "keccak256": "0x4b575f4d82b4cb77b48262e2bffcc15497e52d21c38ba5614668a9cd29540949",
        "urls": [
          "bzz-raw://496f280ff443f0466263cf06351b18a1796bfc5fe5948a7ae60316435ef564a0",
          "dweb:/ipfs/QmbAvbEe7X1oNbBDSFqPDWKmSkZC7dv4kN3aHJde2b4dV3"
        ],
        "license": "Apache-2.0"
      },
      "contracts/prebuilts/interface/IMultiwrap.sol": {
        "keccak256": "0x38ec704445e9d6a7ea5f8e2b249dce160b6892975480f365a18b2ed6419a18fe",
        "urls": [
          "bzz-raw://b29ee2c7290696e04fa06d84e3a1093d92704ebd310bfb5e99f45191b98ee4df",
          "dweb:/ipfs/Qmea1Dh3i3EJM68qqTUJv8f1mZwq1yMEXKNxLanjR3WZen"
        ],
        "license": "Apache-2.0"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "contracts/prebuilts/interface/IMultiwrap.sol",
    "id": 75410,
    "exportedSymbols": {
      "IMultiwrap": [
        75409
      ],
      "ITokenBundle": [
        35018
      ]
    },
    "nodeType": "SourceUnit",
    "src": "39:1654:330",
    "nodes": [
      {
        "id": 75360,
        "nodeType": "PragmaDirective",
        "src": "39:24:330",
        "nodes": [],
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".11"
        ]
      },
      {
        "id": 75361,
        "nodeType": "ImportDirective",
        "src": "65:52:330",
        "nodes": [],
        "absolutePath": "contracts/extension/interface/ITokenBundle.sol",
        "file": "../../extension/interface/ITokenBundle.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 75410,
        "sourceUnit": 35019,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 75409,
        "nodeType": "ContractDefinition",
        "src": "357:1335:330",
        "nodes": [
          {
            "id": 75377,
            "nodeType": "EventDefinition",
            "src": "446:188:330",
            "nodes": [],
            "anonymous": false,
            "documentation": {
              "id": 75365,
              "nodeType": "StructuredDocumentation",
              "src": "400:41:330",
              "text": "@dev Emitted when tokens are wrapped."
            },
            "name": "TokensWrapped",
            "nameLocation": "452:13:330",
            "parameters": {
              "id": 75376,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 75367,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "wrapper",
                  "nameLocation": "491:7:330",
                  "nodeType": "VariableDeclaration",
                  "scope": 75377,
                  "src": "475:23:330",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 75366,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "475:7:330",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 75369,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "recipientOfWrappedToken",
                  "nameLocation": "524:23:330",
                  "nodeType": "VariableDeclaration",
                  "scope": 75377,
                  "src": "508:39:330",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 75368,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "508:7:330",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 75371,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "tokenIdOfWrappedToken",
                  "nameLocation": "573:21:330",
                  "nodeType": "VariableDeclaration",
                  "scope": 75377,
                  "src": "557:37:330",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 75370,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "557:7:330",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 75375,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "wrappedContents",
                  "nameLocation": "612:15:330",
                  "nodeType": "VariableDeclaration",
                  "scope": 75377,
                  "src": "604:23:330",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_struct$_Token_$35007_memory_ptr_$dyn_memory_ptr",
                    "typeString": "struct ITokenBundle.Token[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 75373,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 75372,
                        "name": "Token",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 35007,
                        "src": "604:5:330"
                      },
                      "referencedDeclaration": 35007,
                      "src": "604:5:330",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Token_$35007_storage_ptr",
                        "typeString": "struct ITokenBundle.Token"
                      }
                    },
                    "id": 75374,
                    "nodeType": "ArrayTypeName",
                    "src": "604:7:330",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_Token_$35007_storage_$dyn_storage_ptr",
                      "typeString": "struct ITokenBundle.Token[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "465:168:330"
            }
          },
          {
            "id": 75386,
            "nodeType": "EventDefinition",
            "src": "688:162:330",
            "nodes": [],
            "anonymous": false,
            "documentation": {
              "id": 75378,
              "nodeType": "StructuredDocumentation",
              "src": "640:43:330",
              "text": "@dev Emitted when tokens are unwrapped."
            },
            "name": "TokensUnwrapped",
            "nameLocation": "694:15:330",
            "parameters": {
              "id": 75385,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 75380,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "unwrapper",
                  "nameLocation": "735:9:330",
                  "nodeType": "VariableDeclaration",
                  "scope": 75386,
                  "src": "719:25:330",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 75379,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "719:7:330",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 75382,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "recipientOfWrappedContents",
                  "nameLocation": "770:26:330",
                  "nodeType": "VariableDeclaration",
                  "scope": 75386,
                  "src": "754:42:330",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 75381,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "754:7:330",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 75384,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "tokenIdOfWrappedToken",
                  "nameLocation": "822:21:330",
                  "nodeType": "VariableDeclaration",
                  "scope": 75386,
                  "src": "806:37:330",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 75383,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "806:7:330",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "709:140:330"
            }
          },
          {
            "id": 75400,
            "nodeType": "FunctionDefinition",
            "src": "1160:174:330",
            "nodes": [],
            "documentation": {
              "id": 75387,
              "nodeType": "StructuredDocumentation",
              "src": "856:299:330",
              "text": "  @notice Wrap multiple ERC1155, ERC721, ERC20 tokens into a single wrapped NFT.\n  @param wrappedContents    The tokens to wrap.\n  @param uriForWrappedToken The metadata URI for the wrapped NFT.\n  @param recipient          The recipient of the wrapped NFT."
            },
            "functionSelector": "29e471dd",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "wrap",
            "nameLocation": "1169:4:330",
            "parameters": {
              "id": 75396,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 75391,
                  "mutability": "mutable",
                  "name": "wrappedContents",
                  "nameLocation": "1198:15:330",
                  "nodeType": "VariableDeclaration",
                  "scope": 75400,
                  "src": "1183:30:330",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_struct$_Token_$35007_memory_ptr_$dyn_memory_ptr",
                    "typeString": "struct ITokenBundle.Token[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 75389,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 75388,
                        "name": "Token",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 35007,
                        "src": "1183:5:330"
                      },
                      "referencedDeclaration": 35007,
                      "src": "1183:5:330",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Token_$35007_storage_ptr",
                        "typeString": "struct ITokenBundle.Token"
                      }
                    },
                    "id": 75390,
                    "nodeType": "ArrayTypeName",
                    "src": "1183:7:330",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_Token_$35007_storage_$dyn_storage_ptr",
                      "typeString": "struct ITokenBundle.Token[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 75393,
                  "mutability": "mutable",
                  "name": "uriForWrappedToken",
                  "nameLocation": "1239:18:330",
                  "nodeType": "VariableDeclaration",
                  "scope": 75400,
                  "src": "1223:34:330",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_calldata_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 75392,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1223:6:330",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 75395,
                  "mutability": "mutable",
                  "name": "recipient",
                  "nameLocation": "1275:9:330",
                  "nodeType": "VariableDeclaration",
                  "scope": 75400,
                  "src": "1267:17:330",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 75394,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1267:7:330",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1173:117:330"
            },
            "returnParameters": {
              "id": 75399,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 75398,
                  "mutability": "mutable",
                  "name": "tokenId",
                  "nameLocation": "1325:7:330",
                  "nodeType": "VariableDeclaration",
                  "scope": 75400,
                  "src": "1317:15:330",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 75397,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1317:7:330",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1316:17:330"
            },
            "scope": 75409,
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 75408,
            "nodeType": "FunctionDefinition",
            "src": "1629:61:330",
            "nodes": [],
            "documentation": {
              "id": 75401,
              "nodeType": "StructuredDocumentation",
              "src": "1340:284:330",
              "text": "  @notice Unwrap a wrapped NFT to retrieve underlying ERC1155, ERC721, ERC20 tokens.\n  @param tokenId   The token Id of the wrapped NFT to unwrap.\n  @param recipient The recipient of the underlying ERC1155, ERC721, ERC20 tokens of the wrapped NFT."
            },
            "functionSelector": "7647691d",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "unwrap",
            "nameLocation": "1638:6:330",
            "parameters": {
              "id": 75406,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 75403,
                  "mutability": "mutable",
                  "name": "tokenId",
                  "nameLocation": "1653:7:330",
                  "nodeType": "VariableDeclaration",
                  "scope": 75408,
                  "src": "1645:15:330",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 75402,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1645:7:330",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 75405,
                  "mutability": "mutable",
                  "name": "recipient",
                  "nameLocation": "1670:9:330",
                  "nodeType": "VariableDeclaration",
                  "scope": 75408,
                  "src": "1662:17:330",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 75404,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1662:7:330",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1644:36:330"
            },
            "returnParameters": {
              "id": 75407,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1689:0:330"
            },
            "scope": 75409,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 75363,
              "name": "ITokenBundle",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 35018,
              "src": "381:12:330"
            },
            "id": 75364,
            "nodeType": "InheritanceSpecifier",
            "src": "381:12:330"
          }
        ],
        "canonicalName": "IMultiwrap",
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": {
          "id": 75362,
          "nodeType": "StructuredDocumentation",
          "src": "119:236:330",
          "text": "  Thirdweb's Multiwrap contract lets you wrap arbitrary ERC20, ERC721 and ERC1155\n  tokens you own into a single wrapped token / NFT.\n  A wrapped NFT can be unwrapped i.e. burned in exchange for its underlying contents."
        },
        "fullyImplemented": false,
        "linearizedBaseContracts": [
          75409,
          35018
        ],
        "name": "IMultiwrap",
        "nameLocation": "367:10:330",
        "scope": 75410,
        "usedErrors": []
      }
    ],
    "license": "Apache-2.0"
  },
  "id": 330
}