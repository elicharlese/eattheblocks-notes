{
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "startTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxClaimableSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "supplyClaimed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "quantityLimitPerTransaction",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "waitTimeInSecondsBetweenClaims",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "merkleRoot",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "pricePerToken",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            }
          ],
          "indexed": false,
          "internalType": "struct IDropClaimCondition_V2.ClaimCondition[]",
          "name": "claimConditions",
          "type": "tuple[]"
        }
      ],
      "name": "ClaimConditionsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxTotalSupply",
          "type": "uint256"
        }
      ],
      "name": "MaxTotalSupplyUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "name": "MaxWalletClaimCountUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "revealedURI",
          "type": "string"
        }
      ],
      "name": "NFTRevealed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "claimConditionIndex",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "claimer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quantityClaimed",
          "type": "uint256"
        }
      ],
      "name": "TokensClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "baseURI",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "encryptedBaseURI",
          "type": "bytes"
        }
      ],
      "name": "TokensLazyMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "name": "WalletClaimCountUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "currency",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "pricePerToken",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "proofs",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint256",
          "name": "proofMaxQuantityPerTransaction",
          "type": "uint256"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "baseURIForTokens",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "encryptedBaseURI",
          "type": "bytes"
        }
      ],
      "name": "lazyMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "startTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxClaimableSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "supplyClaimed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "quantityLimitPerTransaction",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "waitTimeInSecondsBetweenClaims",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "merkleRoot",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "pricePerToken",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            }
          ],
          "internalType": "struct IDropClaimCondition_V2.ClaimCondition[]",
          "name": "phases",
          "type": "tuple[]"
        },
        {
          "internalType": "bool",
          "name": "resetClaimEligibility",
          "type": "bool"
        }
      ],
      "name": "setClaimConditions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "approve(address,uint256)": "095ea7b3",
    "balanceOf(address)": "70a08231",
    "claim(address,uint256,address,uint256,bytes32[],uint256)": "7a5a8e7e",
    "getApproved(uint256)": "081812fc",
    "isApprovedForAll(address,address)": "e985e9c5",
    "lazyMint(uint256,string,bytes)": "d37c353b",
    "ownerOf(uint256)": "6352211e",
    "safeTransferFrom(address,address,uint256)": "42842e0e",
    "safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
    "setApprovalForAll(address,bool)": "a22cb465",
    "setClaimConditions((uint256,uint256,uint256,uint256,uint256,bytes32,uint256,address)[],bool)": "e23b8164",
    "supportsInterface(bytes4)": "01ffc9a7",
    "transferFrom(address,address,uint256)": "23b872dd"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxClaimableSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantityLimitPerTransaction\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"waitTimeInSecondsBetweenClaims\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"pricePerToken\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct IDropClaimCondition_V2.ClaimCondition[]\",\"name\":\"claimConditions\",\"type\":\"tuple[]\"}],\"name\":\"ClaimConditionsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxTotalSupply\",\"type\":\"uint256\"}],\"name\":\"MaxTotalSupplyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"MaxWalletClaimCountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"revealedURI\",\"type\":\"string\"}],\"name\":\"NFTRevealed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"claimConditionIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantityClaimed\",\"type\":\"uint256\"}],\"name\":\"TokensClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"encryptedBaseURI\",\"type\":\"bytes\"}],\"name\":\"TokensLazyMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"WalletClaimCountUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pricePerToken\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proofs\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"proofMaxQuantityPerTransaction\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"baseURIForTokens\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"encryptedBaseURI\",\"type\":\"bytes\"}],\"name\":\"lazyMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxClaimableSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantityLimitPerTransaction\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"waitTimeInSecondsBetweenClaims\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"pricePerToken\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"}],\"internalType\":\"struct IDropClaimCondition_V2.ClaimCondition[]\",\"name\":\"phases\",\"type\":\"tuple[]\"},{\"internalType\":\"bool\",\"name\":\"resetClaimEligibility\",\"type\":\"bool\"}],\"name\":\"setClaimConditions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"ClaimConditionsUpdated((uint256,uint256,uint256,uint256,uint256,bytes32,uint256,address)[])\":{\"details\":\"Emitted when new claim conditions are set.\"},\"MaxTotalSupplyUpdated(uint256)\":{\"details\":\"Emitted when the global max supply of tokens is updated.\"},\"MaxWalletClaimCountUpdated(uint256)\":{\"details\":\"Emitted when the global max wallet claim count is updated.\"},\"NFTRevealed(uint256,string)\":{\"details\":\"Emitted when the URI for a batch of 'delayed-reveal' NFTs is revealed.\"},\"TokensClaimed(uint256,address,address,uint256,uint256)\":{\"details\":\"Emitted when tokens are claimed.\"},\"TokensLazyMinted(uint256,uint256,string,bytes)\":{\"details\":\"Emitted when tokens are lazy minted.\"},\"WalletClaimCountUpdated(address,uint256)\":{\"details\":\"Emitted when the wallet claim count for an address is updated.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"claim(address,uint256,address,uint256,bytes32[],uint256)\":{\"params\":{\"currency\":\"The currency in which to pay for the claim.\",\"pricePerToken\":\"The price per token to pay for the claim.\",\"proofMaxQuantityPerTransaction\":\"(Optional) The maximum number of NFTs an address included in an                                        allowlist can claim.\",\"proofs\":\"The proof of the claimer's inclusion in the merkle root allowlist                                        of the claim conditions that apply.\",\"quantity\":\"The quantity of NFTs to claim.\",\"receiver\":\"The receiver of the NFTs to claim.\"}},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"lazyMint(uint256,string,bytes)\":{\"params\":{\"amount\":\"The amount of NFTs to lazy mint.\",\"baseURIForTokens\":\"The URI for the NFTs to lazy mint. If lazy minting                           'delayed-reveal' NFTs, the is a URI for NFTs in the                           un-revealed state.\",\"encryptedBaseURI\":\"If lazy minting 'delayed-reveal' NFTs, this is the                           result of encrypting the URI of the NFTs in the revealed                           state.\"}},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"setClaimConditions((uint256,uint256,uint256,uint256,uint256,bytes32,uint256,address)[],bool)\":{\"params\":{\"phases\":\"Claim conditions in ascending order by `startTimestamp`.\",\"resetClaimEligibility\":\"Whether to reset `limitLastClaimTimestamp` and                               `limitMerkleProofClaim` values when setting new                               claim conditions.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claim(address,uint256,address,uint256,bytes32[],uint256)\":{\"notice\":\"Lets an account claim a given quantity of NFTs.\"},\"lazyMint(uint256,string,bytes)\":{\"notice\":\"Lets an account with `MINTER_ROLE` lazy mint 'n' NFTs.          The URIs for each token is the provided `_baseURIForTokens` + `{tokenId}`.\"},\"setClaimConditions((uint256,uint256,uint256,uint256,uint256,bytes32,uint256,address)[],bool)\":{\"notice\":\"Lets a contract admin (account with `DEFAULT_ADMIN_ROLE`) set claim conditions.\"}},\"notice\":\"Thirdweb's 'Drop' contracts are distribution mechanisms for tokens. The  `DropERC721` contract is a distribution mechanism for ERC721 tokens.  A minter wallet (i.e. holder of `MINTER_ROLE`) can (lazy)mint 'n' tokens  at once by providing a single base URI for all tokens being lazy minted.  The URI for each of the 'n' tokens lazy minted is the provided base URI +  `{tokenId}` of the respective token. (e.g. \\\"ipsf://Qmece.../1\\\").  A minter can choose to lazy mint 'delayed-reveal' tokens. More on 'delayed-reveal'  tokens in [this article](https://blog.thirdweb.com/delayed-reveal-nfts).  A contract admin (i.e. holder of `DEFAULT_ADMIN_ROLE`) can create claim conditions  with non-overlapping time windows, and accounts can claim the tokens according to  restrictions defined in the claim condition that is active at the time of the transaction.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/legacy-contracts/interface/drop/IDropERC721_V3.sol\":\"IDropERC721_V3\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[\":@chainlink/=lib/chainlink/\",\":@ds-test/=lib/ds-test/src/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@std/=lib/forge-std/src/\",\":@thirdweb-dev/dynamic-contracts/=lib/dynamic-contracts/\",\":ERC721A-Upgradeable/=lib/ERC721A-Upgradeable/contracts/\",\":ERC721A/=lib/ERC721A/contracts/\",\":chainlink/=lib/chainlink/\",\":contracts/=contracts/\",\":ds-test/=lib/ds-test/src/\",\":dynamic-contracts/=lib/dynamic-contracts/src/\",\":erc4626-tests/=lib/chainlink/contracts/foundry-lib/openzeppelin-contracts/lib/erc4626-tests/\",\":erc721a-upgradeable/=lib/ERC721A-Upgradeable/\",\":erc721a/=lib/ERC721A/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\"]},\"sources\":{\"contracts/legacy-contracts/interface/drop/IDropClaimCondition_V2.sol\":{\"keccak256\":\"0x4977fa771ecd5780111cfe22de9864e93e8a123713dd2683e00fa33db162f85a\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://45813cd954a401458dadaca7ea86a808fb2641b37c02d161977c65af1f3116a3\",\"dweb:/ipfs/QmfZBbdViSEE55zLY4NkMJHeMjwMje7bsiRPDvym7GcTLr\"]},\"contracts/legacy-contracts/interface/drop/IDropERC721_V3.sol\":{\"keccak256\":\"0xbf2a57734591585a6a0a62b7ed910ac5a954bb5d6614fb416e28169852d8436d\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://4900c9773cfdbf6eb9337da9db0acdb6e06a4e572d19b44944cdedeee74ab1ac\",\"dweb:/ipfs/QmRPWUo3RTVEX8KwLrXfqRu4cAcMBfXyuT9h6jtfecC6jg\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC721/IERC721Upgradeable.sol\":{\"keccak256\":\"0x016298e66a5810253c6c905e61966bb31c8775c3f3517bf946ff56ee31d6c005\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1723de5ae414f210db039b19e6487c19c2d643483c9be7c445cf481a80c199d2\",\"dweb:/ipfs/QmcBLbmPdZsNngYhA1KDadNUqQZoGACytFWuUH74RC4AXC\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/IERC165Upgradeable.sol\":{\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://92ad7e572cf44e6b4b37631b44b62f9eb9fb1cf14d9ce51c1504d5dc7ccaf758\",\"dweb:/ipfs/QmcnbqX85tsWnUXPmtuPLE4SczME2sJaTfmqEFkuAJvWhy\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/structs/BitMapsUpgradeable.sol\":{\"keccak256\":\"0x266cee2afdf743513e8022da480684ed0c63147f469a766d499c7ae3c518e276\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://639f78e22e3da7b4eaa472a31b719cb10f182023d0b1469601e4e75f0bb99e95\",\"dweb:/ipfs/QmWKbk7nneevjSKSAcwCjaDQqwFH2uiZ5j7Nh2PxFPcGqt\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.12+commit.f00d7308"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "approved",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "Approval",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "operator",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "bool",
              "name": "approved",
              "type": "bool",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "ApprovalForAll",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "struct IDropClaimCondition_V2.ClaimCondition[]",
              "name": "claimConditions",
              "type": "tuple[]",
              "components": [
                {
                  "internalType": "uint256",
                  "name": "startTimestamp",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "maxClaimableSupply",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "supplyClaimed",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "quantityLimitPerTransaction",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "waitTimeInSecondsBetweenClaims",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32",
                  "name": "merkleRoot",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "pricePerToken",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "currency",
                  "type": "address"
                }
              ],
              "indexed": false
            }
          ],
          "type": "event",
          "name": "ClaimConditionsUpdated",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "maxTotalSupply",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "MaxTotalSupplyUpdated",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "count",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "MaxWalletClaimCountUpdated",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "endTokenId",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "string",
              "name": "revealedURI",
              "type": "string",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "NFTRevealed",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "claimConditionIndex",
              "type": "uint256",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "claimer",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "startTokenId",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "quantityClaimed",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "TokensClaimed",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "startTokenId",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "endTokenId",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "string",
              "name": "baseURI",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "bytes",
              "name": "encryptedBaseURI",
              "type": "bytes",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "TokensLazyMinted",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "Transfer",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "wallet",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "count",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "WalletClaimCountUpdated",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "approve"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "balanceOf",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "quantity",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "pricePerToken",
              "type": "uint256"
            },
            {
              "internalType": "bytes32[]",
              "name": "proofs",
              "type": "bytes32[]"
            },
            {
              "internalType": "uint256",
              "name": "proofMaxQuantityPerTransaction",
              "type": "uint256"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "claim"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getApproved",
          "outputs": [
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "isApprovedForAll",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "baseURIForTokens",
              "type": "string"
            },
            {
              "internalType": "bytes",
              "name": "encryptedBaseURI",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "lazyMint"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "ownerOf",
          "outputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "safeTransferFrom"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "safeTransferFrom"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "_approved",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setApprovalForAll"
        },
        {
          "inputs": [
            {
              "internalType": "struct IDropClaimCondition_V2.ClaimCondition[]",
              "name": "phases",
              "type": "tuple[]",
              "components": [
                {
                  "internalType": "uint256",
                  "name": "startTimestamp",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "maxClaimableSupply",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "supplyClaimed",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "quantityLimitPerTransaction",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "waitTimeInSecondsBetweenClaims",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32",
                  "name": "merkleRoot",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "pricePerToken",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "currency",
                  "type": "address"
                }
              ]
            },
            {
              "internalType": "bool",
              "name": "resetClaimEligibility",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setClaimConditions"
        },
        {
          "inputs": [
            {
              "internalType": "bytes4",
              "name": "interfaceId",
              "type": "bytes4"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "supportsInterface",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "transferFrom"
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "approve(address,uint256)": {
            "details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
          },
          "balanceOf(address)": {
            "details": "Returns the number of tokens in ``owner``'s account."
          },
          "claim(address,uint256,address,uint256,bytes32[],uint256)": {
            "params": {
              "currency": "The currency in which to pay for the claim.",
              "pricePerToken": "The price per token to pay for the claim.",
              "proofMaxQuantityPerTransaction": "(Optional) The maximum number of NFTs an address included in an                                        allowlist can claim.",
              "proofs": "The proof of the claimer's inclusion in the merkle root allowlist                                        of the claim conditions that apply.",
              "quantity": "The quantity of NFTs to claim.",
              "receiver": "The receiver of the NFTs to claim."
            }
          },
          "getApproved(uint256)": {
            "details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
          },
          "isApprovedForAll(address,address)": {
            "details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
          },
          "lazyMint(uint256,string,bytes)": {
            "params": {
              "amount": "The amount of NFTs to lazy mint.",
              "baseURIForTokens": "The URI for the NFTs to lazy mint. If lazy minting                           'delayed-reveal' NFTs, the is a URI for NFTs in the                           un-revealed state.",
              "encryptedBaseURI": "If lazy minting 'delayed-reveal' NFTs, this is the                           result of encrypting the URI of the NFTs in the revealed                           state."
            }
          },
          "ownerOf(uint256)": {
            "details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
          },
          "safeTransferFrom(address,address,uint256)": {
            "details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
          },
          "safeTransferFrom(address,address,uint256,bytes)": {
            "details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
          },
          "setApprovalForAll(address,bool)": {
            "details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
          },
          "setClaimConditions((uint256,uint256,uint256,uint256,uint256,bytes32,uint256,address)[],bool)": {
            "params": {
              "phases": "Claim conditions in ascending order by `startTimestamp`.",
              "resetClaimEligibility": "Whether to reset `limitLastClaimTimestamp` and                               `limitMerkleProofClaim` values when setting new                               claim conditions."
            }
          },
          "supportsInterface(bytes4)": {
            "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
          },
          "transferFrom(address,address,uint256)": {
            "details": "Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "claim(address,uint256,address,uint256,bytes32[],uint256)": {
            "notice": "Lets an account claim a given quantity of NFTs."
          },
          "lazyMint(uint256,string,bytes)": {
            "notice": "Lets an account with `MINTER_ROLE` lazy mint 'n' NFTs.          The URIs for each token is the provided `_baseURIForTokens` + `{tokenId}`."
          },
          "setClaimConditions((uint256,uint256,uint256,uint256,uint256,bytes32,uint256,address)[],bool)": {
            "notice": "Lets a contract admin (account with `DEFAULT_ADMIN_ROLE`) set claim conditions."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@chainlink/=lib/chainlink/",
        "@ds-test/=lib/ds-test/src/",
        "@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/",
        "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
        "@std/=lib/forge-std/src/",
        "@thirdweb-dev/dynamic-contracts/=lib/dynamic-contracts/",
        "ERC721A-Upgradeable/=lib/ERC721A-Upgradeable/contracts/",
        "ERC721A/=lib/ERC721A/contracts/",
        "chainlink/=lib/chainlink/",
        "contracts/=contracts/",
        "ds-test/=lib/ds-test/src/",
        "dynamic-contracts/=lib/dynamic-contracts/src/",
        "erc4626-tests/=lib/chainlink/contracts/foundry-lib/openzeppelin-contracts/lib/erc4626-tests/",
        "erc721a-upgradeable/=lib/ERC721A-Upgradeable/",
        "erc721a/=lib/ERC721A/",
        "forge-std/=lib/forge-std/src/",
        "openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 20
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "contracts/legacy-contracts/interface/drop/IDropERC721_V3.sol": "IDropERC721_V3"
      },
      "libraries": {}
    },
    "sources": {
      "contracts/legacy-contracts/interface/drop/IDropClaimCondition_V2.sol": {
        "keccak256": "0x4977fa771ecd5780111cfe22de9864e93e8a123713dd2683e00fa33db162f85a",
        "urls": [
          "bzz-raw://45813cd954a401458dadaca7ea86a808fb2641b37c02d161977c65af1f3116a3",
          "dweb:/ipfs/QmfZBbdViSEE55zLY4NkMJHeMjwMje7bsiRPDvym7GcTLr"
        ],
        "license": "Apache-2.0"
      },
      "contracts/legacy-contracts/interface/drop/IDropERC721_V3.sol": {
        "keccak256": "0xbf2a57734591585a6a0a62b7ed910ac5a954bb5d6614fb416e28169852d8436d",
        "urls": [
          "bzz-raw://4900c9773cfdbf6eb9337da9db0acdb6e06a4e572d19b44944cdedeee74ab1ac",
          "dweb:/ipfs/QmRPWUo3RTVEX8KwLrXfqRu4cAcMBfXyuT9h6jtfecC6jg"
        ],
        "license": "Apache-2.0"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC721/IERC721Upgradeable.sol": {
        "keccak256": "0x016298e66a5810253c6c905e61966bb31c8775c3f3517bf946ff56ee31d6c005",
        "urls": [
          "bzz-raw://1723de5ae414f210db039b19e6487c19c2d643483c9be7c445cf481a80c199d2",
          "dweb:/ipfs/QmcBLbmPdZsNngYhA1KDadNUqQZoGACytFWuUH74RC4AXC"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/IERC165Upgradeable.sol": {
        "keccak256": "0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09",
        "urls": [
          "bzz-raw://92ad7e572cf44e6b4b37631b44b62f9eb9fb1cf14d9ce51c1504d5dc7ccaf758",
          "dweb:/ipfs/QmcnbqX85tsWnUXPmtuPLE4SczME2sJaTfmqEFkuAJvWhy"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/structs/BitMapsUpgradeable.sol": {
        "keccak256": "0x266cee2afdf743513e8022da480684ed0c63147f469a766d499c7ae3c518e276",
        "urls": [
          "bzz-raw://639f78e22e3da7b4eaa472a31b719cb10f182023d0b1469601e4e75f0bb99e95",
          "dweb:/ipfs/QmWKbk7nneevjSKSAcwCjaDQqwFH2uiZ5j7Nh2PxFPcGqt"
        ],
        "license": "MIT"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "contracts/legacy-contracts/interface/drop/IDropERC721_V3.sol",
    "id": 58218,
    "exportedSymbols": {
      "BitMapsUpgradeable": [
        160994
      ],
      "IDropClaimCondition_V2": [
        57926
      ],
      "IDropERC721_V3": [
        58217
      ],
      "IERC165Upgradeable": [
        158501
      ],
      "IERC721Upgradeable": [
        156302
      ]
    },
    "nodeType": "SourceUnit",
    "src": "39:4637:280",
    "nodes": [
      {
        "id": 58117,
        "nodeType": "PragmaDirective",
        "src": "39:24:280",
        "nodes": [],
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".11"
        ]
      },
      {
        "id": 58118,
        "nodeType": "ImportDirective",
        "src": "87:81:280",
        "nodes": [],
        "absolutePath": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC721/IERC721Upgradeable.sol",
        "file": "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 58218,
        "sourceUnit": 156303,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 58119,
        "nodeType": "ImportDirective",
        "src": "169:38:280",
        "nodes": [],
        "absolutePath": "contracts/legacy-contracts/interface/drop/IDropClaimCondition_V2.sol",
        "file": "./IDropClaimCondition_V2.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 58218,
        "sourceUnit": 57927,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 58217,
        "nodeType": "ContractDefinition",
        "src": "1109:3566:280",
        "nodes": [
          {
            "id": 58137,
            "nodeType": "EventDefinition",
            "src": "1232:201:280",
            "nodes": [],
            "anonymous": false,
            "documentation": {
              "id": 58125,
              "nodeType": "StructuredDocumentation",
              "src": "1186:41:280",
              "text": "@dev Emitted when tokens are claimed."
            },
            "name": "TokensClaimed",
            "nameLocation": "1238:13:280",
            "parameters": {
              "id": 58136,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 58127,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "claimConditionIndex",
                  "nameLocation": "1277:19:280",
                  "nodeType": "VariableDeclaration",
                  "scope": 58137,
                  "src": "1261:35:280",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 58126,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1261:7:280",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 58129,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "claimer",
                  "nameLocation": "1322:7:280",
                  "nodeType": "VariableDeclaration",
                  "scope": 58137,
                  "src": "1306:23:280",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 58128,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1306:7:280",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 58131,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "receiver",
                  "nameLocation": "1355:8:280",
                  "nodeType": "VariableDeclaration",
                  "scope": 58137,
                  "src": "1339:24:280",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 58130,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1339:7:280",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 58133,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "startTokenId",
                  "nameLocation": "1381:12:280",
                  "nodeType": "VariableDeclaration",
                  "scope": 58137,
                  "src": "1373:20:280",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 58132,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1373:7:280",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 58135,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "quantityClaimed",
                  "nameLocation": "1411:15:280",
                  "nodeType": "VariableDeclaration",
                  "scope": 58137,
                  "src": "1403:23:280",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 58134,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1403:7:280",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1251:181:280"
            }
          },
          {
            "id": 58148,
            "nodeType": "EventDefinition",
            "src": "1489:105:280",
            "nodes": [],
            "anonymous": false,
            "documentation": {
              "id": 58138,
              "nodeType": "StructuredDocumentation",
              "src": "1439:45:280",
              "text": "@dev Emitted when tokens are lazy minted."
            },
            "name": "TokensLazyMinted",
            "nameLocation": "1495:16:280",
            "parameters": {
              "id": 58147,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 58140,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "startTokenId",
                  "nameLocation": "1520:12:280",
                  "nodeType": "VariableDeclaration",
                  "scope": 58148,
                  "src": "1512:20:280",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 58139,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1512:7:280",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 58142,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "endTokenId",
                  "nameLocation": "1542:10:280",
                  "nodeType": "VariableDeclaration",
                  "scope": 58148,
                  "src": "1534:18:280",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 58141,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1534:7:280",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 58144,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "baseURI",
                  "nameLocation": "1561:7:280",
                  "nodeType": "VariableDeclaration",
                  "scope": 58148,
                  "src": "1554:14:280",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 58143,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1554:6:280",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 58146,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "encryptedBaseURI",
                  "nameLocation": "1576:16:280",
                  "nodeType": "VariableDeclaration",
                  "scope": 58148,
                  "src": "1570:22:280",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 58145,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "1570:5:280",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1511:82:280"
            }
          },
          {
            "id": 58155,
            "nodeType": "EventDefinition",
            "src": "1684:58:280",
            "nodes": [],
            "anonymous": false,
            "documentation": {
              "id": 58149,
              "nodeType": "StructuredDocumentation",
              "src": "1600:79:280",
              "text": "@dev Emitted when the URI for a batch of 'delayed-reveal' NFTs is revealed."
            },
            "name": "NFTRevealed",
            "nameLocation": "1690:11:280",
            "parameters": {
              "id": 58154,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 58151,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "endTokenId",
                  "nameLocation": "1710:10:280",
                  "nodeType": "VariableDeclaration",
                  "scope": 58155,
                  "src": "1702:18:280",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 58150,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1702:7:280",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 58153,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "revealedURI",
                  "nameLocation": "1729:11:280",
                  "nodeType": "VariableDeclaration",
                  "scope": 58155,
                  "src": "1722:18:280",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 58152,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1722:6:280",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1701:40:280"
            }
          },
          {
            "id": 58162,
            "nodeType": "EventDefinition",
            "src": "1804:63:280",
            "nodes": [],
            "anonymous": false,
            "documentation": {
              "id": 58156,
              "nodeType": "StructuredDocumentation",
              "src": "1748:51:280",
              "text": "@dev Emitted when new claim conditions are set."
            },
            "name": "ClaimConditionsUpdated",
            "nameLocation": "1810:22:280",
            "parameters": {
              "id": 58161,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 58160,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "claimConditions",
                  "nameLocation": "1850:15:280",
                  "nodeType": "VariableDeclaration",
                  "scope": 58162,
                  "src": "1833:32:280",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_struct$_ClaimCondition_$57904_memory_ptr_$dyn_memory_ptr",
                    "typeString": "struct IDropClaimCondition_V2.ClaimCondition[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 58158,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 58157,
                        "name": "ClaimCondition",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 57904,
                        "src": "1833:14:280"
                      },
                      "referencedDeclaration": 57904,
                      "src": "1833:14:280",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_ClaimCondition_$57904_storage_ptr",
                        "typeString": "struct IDropClaimCondition_V2.ClaimCondition"
                      }
                    },
                    "id": 58159,
                    "nodeType": "ArrayTypeName",
                    "src": "1833:16:280",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_ClaimCondition_$57904_storage_$dyn_storage_ptr",
                      "typeString": "struct IDropClaimCondition_V2.ClaimCondition[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1832:34:280"
            }
          },
          {
            "id": 58167,
            "nodeType": "EventDefinition",
            "src": "1943:52:280",
            "nodes": [],
            "anonymous": false,
            "documentation": {
              "id": 58163,
              "nodeType": "StructuredDocumentation",
              "src": "1873:65:280",
              "text": "@dev Emitted when the global max supply of tokens is updated."
            },
            "name": "MaxTotalSupplyUpdated",
            "nameLocation": "1949:21:280",
            "parameters": {
              "id": 58166,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 58165,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "maxTotalSupply",
                  "nameLocation": "1979:14:280",
                  "nodeType": "VariableDeclaration",
                  "scope": 58167,
                  "src": "1971:22:280",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 58164,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1971:7:280",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1970:24:280"
            }
          },
          {
            "id": 58174,
            "nodeType": "EventDefinition",
            "src": "2077:69:280",
            "nodes": [],
            "anonymous": false,
            "documentation": {
              "id": 58168,
              "nodeType": "StructuredDocumentation",
              "src": "2001:71:280",
              "text": "@dev Emitted when the wallet claim count for an address is updated."
            },
            "name": "WalletClaimCountUpdated",
            "nameLocation": "2083:23:280",
            "parameters": {
              "id": 58173,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 58170,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "wallet",
                  "nameLocation": "2123:6:280",
                  "nodeType": "VariableDeclaration",
                  "scope": 58174,
                  "src": "2107:22:280",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 58169,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2107:7:280",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 58172,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "count",
                  "nameLocation": "2139:5:280",
                  "nodeType": "VariableDeclaration",
                  "scope": 58174,
                  "src": "2131:13:280",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 58171,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2131:7:280",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2106:39:280"
            }
          },
          {
            "id": 58179,
            "nodeType": "EventDefinition",
            "src": "2224:48:280",
            "nodes": [],
            "anonymous": false,
            "documentation": {
              "id": 58175,
              "nodeType": "StructuredDocumentation",
              "src": "2152:67:280",
              "text": "@dev Emitted when the global max wallet claim count is updated."
            },
            "name": "MaxWalletClaimCountUpdated",
            "nameLocation": "2230:26:280",
            "parameters": {
              "id": 58178,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 58177,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "count",
                  "nameLocation": "2265:5:280",
                  "nodeType": "VariableDeclaration",
                  "scope": 58179,
                  "src": "2257:13:280",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 58176,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2257:7:280",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2256:15:280"
            }
          },
          {
            "id": 58189,
            "nodeType": "FunctionDefinition",
            "src": "2961:140:280",
            "nodes": [],
            "documentation": {
              "id": 58180,
              "nodeType": "StructuredDocumentation",
              "src": "2278:678:280",
              "text": "  @notice Lets an account with `MINTER_ROLE` lazy mint 'n' NFTs.\n          The URIs for each token is the provided `_baseURIForTokens` + `{tokenId}`.\n  @param amount           The amount of NFTs to lazy mint.\n  @param baseURIForTokens The URI for the NFTs to lazy mint. If lazy minting\n                           'delayed-reveal' NFTs, the is a URI for NFTs in the\n                           un-revealed state.\n  @param encryptedBaseURI If lazy minting 'delayed-reveal' NFTs, this is the\n                           result of encrypting the URI of the NFTs in the revealed\n                           state."
            },
            "functionSelector": "d37c353b",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "lazyMint",
            "nameLocation": "2970:8:280",
            "parameters": {
              "id": 58187,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 58182,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "2996:6:280",
                  "nodeType": "VariableDeclaration",
                  "scope": 58189,
                  "src": "2988:14:280",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 58181,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2988:7:280",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 58184,
                  "mutability": "mutable",
                  "name": "baseURIForTokens",
                  "nameLocation": "3028:16:280",
                  "nodeType": "VariableDeclaration",
                  "scope": 58189,
                  "src": "3012:32:280",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_calldata_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 58183,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "3012:6:280",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 58186,
                  "mutability": "mutable",
                  "name": "encryptedBaseURI",
                  "nameLocation": "3069:16:280",
                  "nodeType": "VariableDeclaration",
                  "scope": 58189,
                  "src": "3054:31:280",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 58185,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "3054:5:280",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2978:113:280"
            },
            "returnParameters": {
              "id": 58188,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3100:0:280"
            },
            "scope": 58217,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 58206,
            "nodeType": "FunctionDefinition",
            "src": "3901:230:280",
            "nodes": [],
            "documentation": {
              "id": 58190,
              "nodeType": "StructuredDocumentation",
              "src": "3107:789:280",
              "text": "  @notice Lets an account claim a given quantity of NFTs.\n  @param receiver                       The receiver of the NFTs to claim.\n  @param quantity                       The quantity of NFTs to claim.\n  @param currency                       The currency in which to pay for the claim.\n  @param pricePerToken                  The price per token to pay for the claim.\n  @param proofs                         The proof of the claimer's inclusion in the merkle root allowlist\n                                        of the claim conditions that apply.\n  @param proofMaxQuantityPerTransaction (Optional) The maximum number of NFTs an address included in an\n                                        allowlist can claim."
            },
            "functionSelector": "7a5a8e7e",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "claim",
            "nameLocation": "3910:5:280",
            "parameters": {
              "id": 58204,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 58192,
                  "mutability": "mutable",
                  "name": "receiver",
                  "nameLocation": "3933:8:280",
                  "nodeType": "VariableDeclaration",
                  "scope": 58206,
                  "src": "3925:16:280",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 58191,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3925:7:280",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 58194,
                  "mutability": "mutable",
                  "name": "quantity",
                  "nameLocation": "3959:8:280",
                  "nodeType": "VariableDeclaration",
                  "scope": 58206,
                  "src": "3951:16:280",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 58193,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3951:7:280",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 58196,
                  "mutability": "mutable",
                  "name": "currency",
                  "nameLocation": "3985:8:280",
                  "nodeType": "VariableDeclaration",
                  "scope": 58206,
                  "src": "3977:16:280",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 58195,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3977:7:280",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 58198,
                  "mutability": "mutable",
                  "name": "pricePerToken",
                  "nameLocation": "4011:13:280",
                  "nodeType": "VariableDeclaration",
                  "scope": 58206,
                  "src": "4003:21:280",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 58197,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4003:7:280",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 58201,
                  "mutability": "mutable",
                  "name": "proofs",
                  "nameLocation": "4053:6:280",
                  "nodeType": "VariableDeclaration",
                  "scope": 58206,
                  "src": "4034:25:280",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
                    "typeString": "bytes32[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 58199,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "4034:7:280",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 58200,
                    "nodeType": "ArrayTypeName",
                    "src": "4034:9:280",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
                      "typeString": "bytes32[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 58203,
                  "mutability": "mutable",
                  "name": "proofMaxQuantityPerTransaction",
                  "nameLocation": "4077:30:280",
                  "nodeType": "VariableDeclaration",
                  "scope": 58206,
                  "src": "4069:38:280",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 58202,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4069:7:280",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3915:198:280"
            },
            "returnParameters": {
              "id": 58205,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4130:0:280"
            },
            "scope": 58217,
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 58216,
            "nodeType": "FunctionDefinition",
            "src": "4574:99:280",
            "nodes": [],
            "documentation": {
              "id": 58207,
              "nodeType": "StructuredDocumentation",
              "src": "4137:432:280",
              "text": "  @notice Lets a contract admin (account with `DEFAULT_ADMIN_ROLE`) set claim conditions.\n  @param phases                Claim conditions in ascending order by `startTimestamp`.\n  @param resetClaimEligibility Whether to reset `limitLastClaimTimestamp` and\n                               `limitMerkleProofClaim` values when setting new\n                               claim conditions."
            },
            "functionSelector": "e23b8164",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setClaimConditions",
            "nameLocation": "4583:18:280",
            "parameters": {
              "id": 58214,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 58211,
                  "mutability": "mutable",
                  "name": "phases",
                  "nameLocation": "4628:6:280",
                  "nodeType": "VariableDeclaration",
                  "scope": 58216,
                  "src": "4602:32:280",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_struct$_ClaimCondition_$57904_calldata_ptr_$dyn_calldata_ptr",
                    "typeString": "struct IDropClaimCondition_V2.ClaimCondition[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 58209,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 58208,
                        "name": "ClaimCondition",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 57904,
                        "src": "4602:14:280"
                      },
                      "referencedDeclaration": 57904,
                      "src": "4602:14:280",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_ClaimCondition_$57904_storage_ptr",
                        "typeString": "struct IDropClaimCondition_V2.ClaimCondition"
                      }
                    },
                    "id": 58210,
                    "nodeType": "ArrayTypeName",
                    "src": "4602:16:280",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_ClaimCondition_$57904_storage_$dyn_storage_ptr",
                      "typeString": "struct IDropClaimCondition_V2.ClaimCondition[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 58213,
                  "mutability": "mutable",
                  "name": "resetClaimEligibility",
                  "nameLocation": "4641:21:280",
                  "nodeType": "VariableDeclaration",
                  "scope": 58216,
                  "src": "4636:26:280",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 58212,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "4636:4:280",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4601:62:280"
            },
            "returnParameters": {
              "id": 58215,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4672:0:280"
            },
            "scope": 58217,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 58121,
              "name": "IERC721Upgradeable",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 156302,
              "src": "1137:18:280"
            },
            "id": 58122,
            "nodeType": "InheritanceSpecifier",
            "src": "1137:18:280"
          },
          {
            "baseName": {
              "id": 58123,
              "name": "IDropClaimCondition_V2",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 57926,
              "src": "1157:22:280"
            },
            "id": 58124,
            "nodeType": "InheritanceSpecifier",
            "src": "1157:22:280"
          }
        ],
        "canonicalName": "IDropERC721_V3",
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": {
          "id": 58120,
          "nodeType": "StructuredDocumentation",
          "src": "209:898:280",
          "text": "  Thirdweb's 'Drop' contracts are distribution mechanisms for tokens. The\n  `DropERC721` contract is a distribution mechanism for ERC721 tokens.\n  A minter wallet (i.e. holder of `MINTER_ROLE`) can (lazy)mint 'n' tokens\n  at once by providing a single base URI for all tokens being lazy minted.\n  The URI for each of the 'n' tokens lazy minted is the provided base URI +\n  `{tokenId}` of the respective token. (e.g. \"ipsf://Qmece.../1\").\n  A minter can choose to lazy mint 'delayed-reveal' tokens. More on 'delayed-reveal'\n  tokens in [this article](https://blog.thirdweb.com/delayed-reveal-nfts).\n  A contract admin (i.e. holder of `DEFAULT_ADMIN_ROLE`) can create claim conditions\n  with non-overlapping time windows, and accounts can claim the tokens according to\n  restrictions defined in the claim condition that is active at the time of the transaction."
        },
        "fullyImplemented": false,
        "linearizedBaseContracts": [
          58217,
          57926,
          156302,
          158501
        ],
        "name": "IDropERC721_V3",
        "nameLocation": "1119:14:280",
        "scope": 58218,
        "usedErrors": []
      }
    ],
    "license": "Apache-2.0"
  },
  "id": 280
}